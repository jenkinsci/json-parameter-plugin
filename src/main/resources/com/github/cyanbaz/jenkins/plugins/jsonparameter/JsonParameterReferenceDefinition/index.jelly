<!--
Copyright (c) 2025 Caner Yanbaz
Licensed under the MIT License (see LICENSE file).
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form" xmlns:st="jelly:stapler">
    <st:bind var="loadUrl" value="${it.descriptor}/loadOptions"/>
    <j:set var="crumbField" value="${app.crumbIssuer.crumbRequestField}"/>
    <j:set var="crumbValue" value="${app.crumbIssuer.crumb}"/>
    <f:entry title="${it.name}" description="${it.description}">
        <j:choose>
            <div name="parameter" description="${it.description}" class="jenkins-select">
                <input type="hidden" name="name" value="${it.name}"/>
                <select name="value" class="jenkins-select__input">
                    <j:if test="${empty it.defaultValue}">
                        <option value="" selected="selected" disabled="disabled">
                            ${it.getPlaceholderMessage()}
                        </option>
                    </j:if>
                    <j:forEach var="json" items="${result.value}">
                        <f:option value="${json.value}" selected="${it.defaultValue eq json.value}">${json.name}
                        </f:option>
                    </j:forEach>
                </select>
            </div>
        </j:choose>
    </f:entry>
    <script>
        (function () {
            const refName = '${it.ref}';
            const myName  = '${it.name}';
            const query   = '${it.query}';
            let refSelect = null;
            let mySelect = null;

            const labels = [...document.querySelectorAll('.jenkins-form-label')];
            const cascadingLabel = labels.find(label => label.textContent.trim() === myName);

            const refInput = document.querySelector('input[name="name"]');
            if (refInput &amp;&amp; refInput.value === refName) {
                refSelect = document.querySelector('select[name="value"]');
            }

            if (cascadingLabel) {
                const settingMain = cascadingLabel.nextElementSibling;
                mySelect = settingMain.querySelector('select');
            }
            console.log(mySelect)
            if (!refSelect || !mySelect) return;

            function refresh() {
                var url = "${rootURL}/descriptorByName/${it.descriptor.clazz.name}/loadOptions"
                        + "?refName="  + encodeURIComponent(refName)
                        + "&amp;refValue=" + encodeURIComponent(refSelect.value || '')
                        + "&amp;query="    + encodeURIComponent(query || '');
                fetch(url, { credentials: "same-origin" })
                        .then(function(r){ return r.json(); })
                        .then(resp => {
                            let items = Array.isArray(resp) ? resp
                                    : Array.isArray(resp?.data) ? resp.data
                                            : Array.isArray(resp?.value?.options) ? resp.value.options
                                                    : [];

                            items = items.map(x => (typeof x === "string" ? { name: x, value: x, selected: false } : x));

                            const prev = mySelect.value;
                            mySelect.innerHTML = "";
                            const seen = new Set();

                            items.forEach(item => {
                                const v = item.value ?? item.name;
                                if (v == null || seen.has(v)) return;
                                seen.add(v);
                                const opt = document.createElement("option");
                                opt.value = v;
                                opt.textContent = item.name ?? String(v);
                                if (item.selected) opt.selected = true;
                                mySelect.appendChild(opt);
                            });

                            if (!mySelect.value &amp;&amp; mySelect.options.length) {
                                mySelect.selectedIndex = 0;
                            }

                            mySelect.dispatchEvent(new Event("change", { bubbles: true }));
                        })
                        .catch(console.error);
            }

            refresh();
            refSelect.addEventListener('change', refresh);
        })();
    </script>
</j:jelly>